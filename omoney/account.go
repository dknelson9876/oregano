package omoney

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AccountType string

const (
	UnknownAccount = "unknown"
	Checking       = "checking"
	Savings        = "savings"
	CreditCard     = "creditCard"
	Investment     = "investment"
	PersonalLoan   = "personalLoan"
)

type Account struct {
	// Unique identifier for account within this program.
	// May be copied from Plaid or generated by this program.
	// Required field.
	Id string
	// English nickname for account within this program.
	// Optional field that defaults to empty string.
	Alias string
	// Plaid generated key for getting data on this account.
	// Defaults to empty string if account was manually created.
	PlaidToken   string
	Type         AccountType
	Transactions []Transaction
	// The known value of this account at the time specified
	// in `AnchorTime`. Optional field that defaults to 0
	AnchorBalance float64
	// The time specified for the known value `AnchorBalance`.
	// Optional field that defaults to time.Now()
	AnchorTime time.Time
}

type AccountOption func(*Account)

func NewAccount(options ...AccountOption) *Account {
	acc := &Account{
		Id:           uuid.New().String(),
		Type:         UnknownAccount,
		Transactions: make([]Transaction, 0),
		AnchorTime:   time.Now(),
	}

	for _, op := range options {
		op(acc)
	}

	return acc
}

func WithPlaidIds(itemId string, accessToken string) AccountOption {
	return func(acc *Account) {
		acc.Id = itemId
		acc.PlaidToken = accessToken
	}
}

func WithAlias(alias string) AccountOption {
	return func(acc *Account) {
		acc.Alias = alias
	}
}

func WithAnchor(balance float64, time time.Time) AccountOption {
	return func(acc *Account) {
		acc.AnchorBalance = balance
		acc.AnchorTime = time
	}
}

func WithAccountType(accType AccountType) AccountOption {
	return func(acc *Account) {
		acc.Type = accType
	}
}

func ParseAccountType(input string) (AccountType, error) {
	switch input {
	case "ch", "checking":
		return Checking, nil
	case "sa", "savings":
		return Savings, nil
	case "cc", "credit":
		return CreditCard, nil
	case "in", "investment":
		return Investment, nil
	case "pl", "personalLoan":
		return PersonalLoan, nil
	default:
		return UnknownAccount, fmt.Errorf("account type %s not recognized", input)
	}
}
